syntax = "proto3";

option go_package = "github.com/paysuper/paysuper-billing-server/pkg/proto/grpc";
package grpc;

import "billing/billing.proto";

service BillingService {
    rpc OrderCreateProcess (billing.OrderCreateRequest) returns (billing.Order) {}
    rpc PaymentFormJsonDataProcess (PaymentFormJsonDataRequest) returns (PaymentFormJsonDataResponse) {}
    rpc PaymentCreateProcess (PaymentCreateRequest) returns (PaymentCreateResponse) {}
    rpc PaymentCallbackProcess (PaymentNotifyRequest) returns (PaymentNotifyResponse) {}

    rpc RebuildCache (EmptyRequest) returns (EmptyResponse) {}
    rpc UpdateOrder (billing.Order) returns (EmptyResponse) {}
    rpc UpdateMerchant (billing.Merchant) returns (EmptyResponse) {}
    rpc GetConvertRate (ConvertRateRequest) returns (ConvertRateResponse) {}

    rpc GetMerchantBy (GetMerchantByRequest) returns (MerchantGetMerchantResponse) {}
    rpc ListMerchants (MerchantListingRequest) returns (Merchants) {}
    rpc ChangeMerchant (OnboardingRequest) returns (billing.Merchant) {}
    rpc ChangeMerchantStatus (MerchantChangeStatusRequest) returns (billing.Merchant) {}
    rpc ChangeMerchantAgreementType (ChangeMerchantAgreementTypeRequest) returns (ChangeMerchantAgreementTypeResponse) {}

    rpc CreateNotification (NotificationRequest) returns (billing.Notification) {}
    rpc GetNotification (GetNotificationRequest) returns (billing.Notification) {}
    rpc ListNotifications (ListingNotificationRequest) returns (Notifications) {}
    rpc MarkNotificationAsRead (GetNotificationRequest) returns (billing.Notification) {}

    rpc ListMerchantPaymentMethods (ListMerchantPaymentMethodsRequest) returns (ListingMerchantPaymentMethod) {}
    rpc GetMerchantPaymentMethod (GetMerchantPaymentMethodRequest) returns (billing.MerchantPaymentMethod) {}
    rpc ChangeMerchantPaymentMethod (MerchantPaymentMethodRequest) returns (MerchantPaymentMethodResponse) {}

    rpc CreateRefund (CreateRefundRequest) returns (CreateRefundResponse) {}
    rpc ListRefunds (ListRefundsRequest) returns (ListRefundsResponse) {}
    rpc GetRefund (GetRefundRequest) returns (CreateRefundResponse) {}
    rpc ProcessRefundCallback (CallbackRequest) returns (PaymentNotifyResponse) {}

    rpc PaymentFormLanguageChanged (PaymentFormUserChangeLangRequest) returns (PaymentFormDataChangeResponse) {}
    rpc PaymentFormPaymentAccountChanged (PaymentFormUserChangePaymentAccountRequest) returns (PaymentFormDataChangeResponse) {}
    rpc ProcessBillingAddress (ProcessBillingAddressRequest) returns (ProcessBillingAddressResponse) {}

    rpc ChangeCustomer(billing.Customer) returns (billing.Customer) {}
}

message EmptyRequest {
}
message EmptyResponse {
}

message PaymentCreateRequest {
    map<string, string> data = 1;
}

message PaymentCreateResponse {
    int32 status = 1;
    string redirect_url = 2;
    string error = 3;
}

message PaymentFormJsonDataRequest {
    string order_id = 1;
    string scheme = 2;
    string host = 3;
    string locale = 4;
    string ip = 5;
}

message PaymentFormJsonDataProject {
    string name = 1; // project name
    // @inject_tag: json:"url_success,omitempty"
    string url_success = 2; // url to redirect user after successfully completed payment. may be NULL if not set in project settings
    // @inject_tag: json:"url_fail,omitempty"
    string url_fail = 3; // url to redirect user after failed payment. may be NULL if not set in project settings
}

message PaymentFormJsonDataResponse {
    string id = 1; // order unique identifier
    // @inject_tag: json:"account,omitempty"
    string account = 2; // user account, may be null
    // @inject_tag: json:"has_vat"
    bool has_vat = 3; // flag to show VAT commission amount in payment form
    // @inject_tag: json:"vat"
    float vat = 4; // amount of vat for payment
    double amount = 5; // payment amount without VAT commission
    double total_amount = 6; // total payment amount with VAT commission
    string currency = 7; // order currency
    PaymentFormJsonDataProject project = 8; // contain data about project
    repeated billing.PaymentFormPaymentMethod payment_methods = 9; // contain data about payment methods
    string inline_form_redirect_url = 10; // url to redirect user to inline form in PSP side
    string token = 11; // access token to websocket private chanel
    // @inject_tag: json:"user_address_data_required"
    bool user_address_data_required = 12;
}

message PaymentNotifyRequest {
    string order_id = 1;
    bytes request = 2;
    string signature = 3;
}

message PaymentNotifyResponse {
    int32 status = 1;
    string error = 2;
}

message ConvertRateRequest {
    int32 from = 1;
    int32 to = 2;
}

message ConvertRateResponse {
    double rate = 1;
}

message OnboardingBanking {
    //@inject_tag: validate:"omitempty,len=3"
    string currency = 1;
    string name = 2;
    string address = 3;
    string account_number = 4;
    string swift = 5;
    string details = 6;
}

message OnboardingRequest {
    // @inject_tag: validate:"omitempty,hexadecimal,len=24"
    string id = 1;
    //@inject_tag: validate:"required"
    billing.MerchantUser user = 2;
    string name = 3;
    string alternative_name = 4;
    string website = 5;
    //@inject_tag: validate:"omitempty,len=2"
    string country = 6;
    string state = 7;
    string zip = 8;
    string city = 9;
    string address = 10;
    string address_additional = 11;
    string registration_number = 12;
    string tax_id = 13;
    // @inject_tag: validate:"required"
    billing.MerchantContact contacts = 14;
    // @inject_tag: validate:"required"
    OnboardingBanking banking = 15;
}

message FindByIdRequest {
    string id = 1;
}

message MerchantListingRequest {
    string name = 1;
    int32 is_signed = 2;
    int64 last_payout_date_from = 3;
    int64 last_payout_date_to = 4;
    double last_payout_amount = 5;
    repeated string sort = 6;
    int32 limit = 7;
    int32 offset = 8;
}

message Merchants {
    repeated billing.Merchant merchants = 1;
}

message MerchantChangeStatusRequest {
    // @inject_tag: validate:"required,hexadecimal"
    string merchant_id = 1;
    string user_id = 2;
    // @inject_tag: validate:"required,numeric"
    int32 status = 3;
    string message = 4;
}

message NotificationRequest {
    // @inject_tag: validate:"required,hexadecimal"
    string merchant_id = 1;
    string user_id = 2;
    // @inject_tag: validate:"required"
    string title = 3;
    // @inject_tag: validate:"required"
    string message = 4;
}

message Notifications {
    repeated billing.Notification notifications = 1;
}

message ListingNotificationRequest {
    string merchant_id = 1;
    string user_id = 2;
    int32 limit = 7;
    int32 offset = 8;
}

message ListingMerchantPaymentMethod {
    repeated billing.MerchantPaymentMethod payment_methods = 1;
}

message GetMerchantPaymentMethodRequest {
    // @inject_tag: query:"merchant_id", validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: query:"payment_method_id", validate:"required,hexadecimal,len=24"
    string payment_method_id = 2;
}

message ListMerchantPaymentMethodsRequest {
    // @inject_tag: query:"merchant_id", validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: query:"payment_method_name"
    string payment_method_name = 2;
}

message MerchantPaymentMethodRequest {
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string merchant_id = 2;
    // @inject_tag: validate:"required,dive"
    billing.MerchantPaymentMethodIdentification payment_method = 3;
    // @inject_tag: validate:"required,dive"
    billing.MerchantPaymentMethodCommissions commission = 4;
    // @inject_tag: validate:"required,dive"
    billing.MerchantPaymentMethodIntegration integration = 5;
    // @inject_tag: validate:"required"
    bool is_active = 6;
}

message MerchantPaymentMethodResponse {
    int32 status = 1;
    string message = 2;
    billing.MerchantPaymentMethod item = 3;
}

message MerchantGetMerchantResponse {
    int32 status = 1;
    string message = 2;
    billing.Merchant item = 3;
}

message GetNotificationRequest {
    string merchant_id = 1;
    string notification_id = 2;
}

message CreateRefundRequest {
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string order_id = 1;
    // @inject_tag: validate:"required,numeric,gt=0"
    double amount = 2;
    string creator_id = 3;
    string reason = 4;
}

message CreateRefundResponse {
    int32 status = 1;
    string message = 2;
    billing.Refund item = 3;
}

message ListRefundsRequest {
    string order_id = 1;
    int32 limit = 7;
    int32 offset = 8;
}

message ListRefundsResponse {
    int32 count = 1;
    repeated billing.Refund items = 2;
}

message GetRefundRequest {
    string order_id = 1;
    string refund_id = 2;
}

message CallbackRequest {
    string handler = 1;
    bytes body = 2;
    string signature = 3;
}

message PaymentFormDataChangedRequest {
    string order_id = 1;
    string lang = 2;
    string account = 3;
}

message PaymentFormUserChangeLangRequest {
    // @inject_tag: validate:"required,uuid"
    string order_id = 1;
    // @inject_tag: validate:"required,len=2"
    string lang = 2;
}

message PaymentFormUserChangePaymentAccountRequest {
    // @inject_tag: validate:"required,uuid"
    string order_id = 1;
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string method_id = 2;
    // @inject_tag: validate:"required"
    string account = 3;
}

message UserIpData {
    // @inject_tag: json:"country"
    string country = 1;
    // @inject_tag: json:"city"
    string city = 2;
    // @inject_tag: json:"zip"
    string zip = 3;
}

message PaymentFormDataChangeResponseItem {
    // @inject_tag: json:"user_address_data_required"
    bool user_address_data_required = 1;
    UserIpData user_ip_data = 2;
}

message PaymentFormDataChangeResponse {
    int32 status = 1;
    string message = 2;
    PaymentFormDataChangeResponseItem item = 3;
}

message ProcessBillingAddressRequest {
    // @inject_tag: validate:"required,uuid"
    string order_id = 1;
    // @inject_tag: validate:"required,len=2"
    string country = 2;
    // @inject_tag: validate:"required"
    string city = 3;
    // @inject_tag: validate:"required"
    string zip = 4;
}

message ProcessBillingAddressResponseItem {
    // @inject_tag: json:"has_vat"
    bool has_vat = 2;
    // @inject_tag: json:"vat"
    float vat = 3;
    // @inject_tag: json:"amount"
    float amount = 4;
    // @inject_tag: json:"total_amount"
    float total_amount = 5;
}

message ProcessBillingAddressResponse {
    int32 status = 1;
    string message = 2;
    ProcessBillingAddressResponseItem item = 3;
}

message GetMerchantByRequest {
    string merchant_id = 1;
    string user_id = 2;
}

message ChangeMerchantAgreementTypeRequest {
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: validate:"required,numeric,oneof=1 2"
    int32 agreement_type = 2;
}

message ChangeMerchantAgreementTypeResponse {
    int32 status = 1;
    string message = 2;
    billing.Merchant item = 3;
}