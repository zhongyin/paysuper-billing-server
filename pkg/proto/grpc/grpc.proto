syntax = "proto3";

option go_package = "github.com/paysuper/paysuper-billing-server/pkg/proto/grpc";
package grpc;

import "google/protobuf/timestamp.proto";
import "billing/billing.proto";

service BillingService {
    rpc OrderCreateProcess (billing.OrderCreateRequest) returns (billing.Order) {
    }
    rpc PaymentFormJsonDataProcess (PaymentFormJsonDataRequest) returns (PaymentFormJsonDataResponse) {
    }
    rpc PaymentCreateProcess (PaymentCreateRequest) returns (PaymentCreateResponse) {
    }
    rpc PaymentCallbackProcess (PaymentNotifyRequest) returns (PaymentNotifyResponse) {
    }

    rpc RebuildCache (EmptyRequest) returns (EmptyResponse) {
    }
    rpc UpdateOrder (billing.Order) returns (EmptyResponse) {
    }
    rpc UpdateMerchant (billing.Merchant) returns (EmptyResponse) {
    }
    rpc GetConvertRate (ConvertRateRequest) returns (ConvertRateResponse) {
    }

    rpc GetMerchantBy (GetMerchantByRequest) returns (MerchantGetMerchantResponse) {
    }
    rpc ListMerchants (MerchantListingRequest) returns (MerchantListingResponse) {
    }
    rpc ChangeMerchant (OnboardingRequest) returns (billing.Merchant) {
    }
    rpc ChangeMerchantStatus (MerchantChangeStatusRequest) returns (billing.Merchant) {
    }
    rpc ChangeMerchantData (ChangeMerchantDataRequest) returns (ChangeMerchantDataResponse) {
    }
    rpc SetMerchantS3Agreement (SetMerchantS3AgreementRequest) returns (ChangeMerchantDataResponse) {
    }

    rpc CreateNotification (NotificationRequest) returns (billing.Notification) {
    }
    rpc GetNotification (GetNotificationRequest) returns (billing.Notification) {
    }
    rpc ListNotifications (ListingNotificationRequest) returns (Notifications) {
    }
    rpc MarkNotificationAsRead (GetNotificationRequest) returns (billing.Notification) {
    }

    rpc ListMerchantPaymentMethods (ListMerchantPaymentMethodsRequest) returns (ListingMerchantPaymentMethod) {
    }
    rpc GetMerchantPaymentMethod (GetMerchantPaymentMethodRequest) returns (billing.MerchantPaymentMethod) {
    }
    rpc ChangeMerchantPaymentMethod (MerchantPaymentMethodRequest) returns (MerchantPaymentMethodResponse) {
    }

    rpc CreateRefund (CreateRefundRequest) returns (CreateRefundResponse) {
    }
    rpc ListRefunds (ListRefundsRequest) returns (ListRefundsResponse) {
    }
    rpc GetRefund (GetRefundRequest) returns (CreateRefundResponse) {
    }
    rpc ProcessRefundCallback (CallbackRequest) returns (PaymentNotifyResponse) {
    }

    rpc PaymentFormLanguageChanged (PaymentFormUserChangeLangRequest) returns (PaymentFormDataChangeResponse) {
    }
    rpc PaymentFormPaymentAccountChanged (PaymentFormUserChangePaymentAccountRequest) returns (PaymentFormDataChangeResponse) {
    }
    rpc ProcessBillingAddress (ProcessBillingAddressRequest) returns (ProcessBillingAddressResponse) {
    }

    rpc CreateOrUpdateProduct (Product) returns (Product) {
    }
    rpc ListProducts (ListProductsRequest) returns (ListProductsResponse) {
    }
    rpc GetProduct (RequestProduct) returns (Product) {
    }
    rpc DeleteProduct (RequestProduct) returns (EmptyResponse) {
    }
    rpc GetProductsForOrder (GetProductsForOrderRequest) returns (ListProductsResponse) {
    }

    rpc ChangeCustomer (billing.Customer) returns (ChangeCustomerResponse) {
    }
}

message EmptyRequest {
}
message EmptyResponse {
}

message PaymentCreateRequest {
    map<string, string> data = 1;
    string accept_language = 2;
    string ip = 3;
    string user_agent = 4;
}

message PaymentCreateResponse {
    int32 status = 1;
    string redirect_url = 2;
    string error = 3;
}

message PaymentFormJsonDataRequest {
    string order_id = 1;
    string scheme = 2;
    string host = 3;
    string locale = 4;
    string ip = 5;
    string token = 6;
    string user_agent = 7;
}

message PaymentFormJsonDataProject {
    string name = 1; // project name
    // @inject_tag: json:"url_success,omitempty"
    string url_success = 2; // url to redirect user after successfully completed payment. may be NULL if not set in project settings
    // @inject_tag: json:"url_fail,omitempty"
    string url_fail = 3; // url to redirect user after failed payment. may be NULL if not set in project settings
}

message PaymentFormJsonDataResponse {
    string id = 1; // order unique identifier
    // @inject_tag: json:"account,omitempty"
    string account = 2; // user account, may be null
    // @inject_tag: json:"has_vat"
    bool has_vat = 3; // flag to show VAT commission amount in payment form
    // @inject_tag: json:"vat"
    float vat = 4; // amount of vat for payment
    double amount = 5; // payment amount without VAT commission
    double total_amount = 6; // total payment amount with VAT commission
    string currency = 7; // order currency
    PaymentFormJsonDataProject project = 8; // contain data about project
    repeated billing.PaymentFormPaymentMethod payment_methods = 9; // contain data about payment methods
    string inline_form_redirect_url = 10; // url to redirect user to inline form in PSP side
    string token = 11; // access token to websocket private chanel
    // @inject_tag: json:"user_address_data_required"
    bool user_address_data_required = 12;
    // @inject_tag: json:"items" validate="omitempty,gte=1,dive"
    repeated billing.OrderItem items = 13;
}

message PaymentNotifyRequest {
    string order_id = 1;
    bytes request = 2;
    string signature = 3;
}

message PaymentNotifyResponse {
    int32 status = 1;
    string error = 2;
}

message ConvertRateRequest {
    int32 from = 1;
    int32 to = 2;
}

message ConvertRateResponse {
    double rate = 1;
}

message OnboardingBanking {
    //@inject_tag: validate:"omitempty,len=3"
    string currency = 1;
    string name = 2;
    string address = 3;
    string account_number = 4;
    string swift = 5;
    string details = 6;
}

message OnboardingRequest {
    // @inject_tag: validate:"omitempty,hexadecimal,len=24"
    string id = 1;
    //@inject_tag: validate:"required"
    billing.MerchantUser user = 2;
    string name = 3;
    string alternative_name = 4;
    string website = 5;
    //@inject_tag: validate:"omitempty,len=2"
    string country = 6;
    string state = 7;
    string zip = 8;
    string city = 9;
    string address = 10;
    string address_additional = 11;
    string registration_number = 12;
    string tax_id = 13;
    // @inject_tag: validate:"required"
    billing.MerchantContact contacts = 14;
    // @inject_tag: validate:"required"
    OnboardingBanking banking = 15;
}

message FindByIdRequest {
    string id = 1;
}

message MerchantListingRequest {
    // @inject_tag: query:"name"
    string name = 1;
    int32 is_signed = 2;
    // @inject_tag: query:"last_payout_date_from" validate:"omitempty,numeric,gt=0"
    int64 last_payout_date_from = 3;
    // @inject_tag: query:"last_payout_date_to" validate:"omitempty,numeric,gt=0"
    int64 last_payout_date_to = 4;
    // @inject_tag: query:"last_payout_amount" validate:"omitempty,numeric"
    double last_payout_amount = 5;
    // @inject_tag: query:"sort[]"
    repeated string sort = 6;
    // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
    int32 limit = 7;
    // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
    int32 offset = 8;
    // @inject_tag: query:"quick_search"
    string quick_search = 9;
    // @inject_tag: query:"status[]"
    repeated int32 statuses = 10;
}

message MerchantListingResponse {
    int32 count = 1;
    repeated billing.Merchant items = 2;
}

message MerchantChangeStatusRequest {
    // @inject_tag: validate:"required,hexadecimal"
    string merchant_id = 1;
    string user_id = 2;
    // @inject_tag: validate:"omitempty,numeric,oneof=0 1 2 3 4"
    int32 status = 3;
    string message = 4;
}

message NotificationRequest {
    // @inject_tag: validate:"required,hexadecimal"
    string merchant_id = 1;
    string user_id = 2;
    // @inject_tag: validate:"required"
    string title = 3;
    // @inject_tag: validate:"required"
    string message = 4;
}

message Notifications {
    int32 count = 1;
    repeated billing.Notification items = 2;
}

message ListingNotificationRequest {
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: query:"user" validate:"omitempty,hexadecimal,len=24"
    string user_id = 2;
    // @inject_tag: validate:"omitempty,numeric,oneof=1 2"
    int32 is_system = 3;
    // @inject_tag: query:"limit" validate:"omitempty,numeric,gt=0"
    int32 limit = 4;
    // @inject_tag: query:"offset" validate:"omitempty,numeric,gte=0"
    int32 offset = 5;
    // @inject_tag: query:"sort[]"
    repeated string sort = 6;
}

message ListingMerchantPaymentMethod {
    repeated billing.MerchantPaymentMethod payment_methods = 1;
}

message GetMerchantPaymentMethodRequest {
    // @inject_tag: query:"merchant_id", validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: query:"payment_method_id", validate:"required,hexadecimal,len=24"
    string payment_method_id = 2;
}

message ListMerchantPaymentMethodsRequest {
    // @inject_tag: query:"merchant_id", validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: query:"method_name"
    string payment_method_name = 2;
    // @inject_tag: query:"sort[]"
    repeated string sort = 3;
}

message MerchantPaymentMethodRequest {
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string merchant_id = 2;
    // @inject_tag: validate:"required,dive"
    billing.MerchantPaymentMethodIdentification payment_method = 3;
    // @inject_tag: validate:"required,dive"
    billing.MerchantPaymentMethodCommissions commission = 4;
    // @inject_tag: validate:"required,dive"
    billing.MerchantPaymentMethodIntegration integration = 5;
    // @inject_tag: validate:"required"
    bool is_active = 6;
}

message MerchantPaymentMethodResponse {
    int32 status = 1;
    string message = 2;
    billing.MerchantPaymentMethod item = 3;
}

message MerchantGetMerchantResponse {
    int32 status = 1;
    string message = 2;
    billing.Merchant item = 3;
}

message GetNotificationRequest {
    string merchant_id = 1;
    string notification_id = 2;
}

message CreateRefundRequest {
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string order_id = 1;
    // @inject_tag: validate:"required,numeric,gt=0"
    double amount = 2;
    string creator_id = 3;
    string reason = 4;
}

message CreateRefundResponse {
    int32 status = 1;
    string message = 2;
    billing.Refund item = 3;
}

message ListRefundsRequest {
    string order_id = 1;
    int32 limit = 7;
    int32 offset = 8;
}

message ListRefundsResponse {
    int32 count = 1;
    repeated billing.Refund items = 2;
}

message GetRefundRequest {
    string order_id = 1;
    string refund_id = 2;
}

message CallbackRequest {
    string handler = 1;
    bytes body = 2;
    string signature = 3;
}

message PaymentFormDataChangedRequest {
    string order_id = 1;
    string lang = 2;
    string account = 3;
}

message PaymentFormUserChangeLangRequest {
    // @inject_tag: validate:"required,uuid"
    string order_id = 1;
    // @inject_tag: validate:"required,len=2"
    string lang = 2;
    string accept_language = 3;
    string ip = 4;
    string user_agent = 5;
}

message PaymentFormUserChangePaymentAccountRequest {
    // @inject_tag: validate:"required,uuid"
    string order_id = 1;
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string method_id = 2;
    // @inject_tag: validate:"required"
    string account = 3;
    string accept_language = 4;
    string ip = 5;
    string user_agent = 6;
}

message UserIpData {
    // @inject_tag: json:"country"
    string country = 1;
    // @inject_tag: json:"city"
    string city = 2;
    // @inject_tag: json:"zip"
    string zip = 3;
}

message PaymentFormDataChangeResponseItem {
    // @inject_tag: json:"user_address_data_required"
    bool user_address_data_required = 1;
    UserIpData user_ip_data = 2;
}

message PaymentFormDataChangeResponse {
    int32 status = 1;
    string message = 2;
    PaymentFormDataChangeResponseItem item = 3;
}

message ProcessBillingAddressRequest {
    // @inject_tag: validate:"required,uuid"
    string order_id = 1;
    // @inject_tag: validate:"required,len=2"
    string country = 2;
    // @inject_tag: validate:"required"
    string city = 3;
    // @inject_tag: validate:"required"
    string zip = 4;
    string accept_language = 5;
    string ip = 6;
    string user_agent = 7;
}

message ProcessBillingAddressResponseItem {
    // @inject_tag: json:"has_vat"
    bool has_vat = 2;
    // @inject_tag: json:"vat"
    float vat = 3;
    // @inject_tag: json:"amount"
    float amount = 4;
    // @inject_tag: json:"total_amount"
    float total_amount = 5;
}

message ProcessBillingAddressResponse {
    int32 status = 1;
    string message = 2;
    ProcessBillingAddressResponseItem item = 3;
}

message GetMerchantByRequest {
    string merchant_id = 1;
    string user_id = 2;
}

message ChangeMerchantDataRequest {
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: validate:"omitempty,numeric,oneof=1 2"
    int32 agreement_type = 2;
    bool has_merchant_signature = 3;
    bool has_psp_signature = 4;
    bool agreement_sent_via_mail = 5;
    string mail_tracking_link = 6;
}

message ChangeMerchantDataResponse {
    int32 status = 1;
    string message = 2;
    billing.Merchant item = 3;
}

message SetMerchantS3AgreementRequest {
    // @inject_tag: validate:"required,hexadecimal,len=24"
    string merchant_id = 1;
    // @inject_tag: json:"-"
    string s3_agreement_name = 2;
}

message Product {
    //@inject_tag: validate:"omitempty,hexadecimal,len=24" json:"id" bson:"_id"
    string id = 1;
    //@inject_tag: validate:"required,hexadecimal,len=24" json:"-" bson:"merchant_id"
    string merchant_id = 2;
    //@inject_tag: validate:"required,hexadecimal,len=24" json:"project_id" bson:"project_id"
    string project_id = 3;
    //@inject_tag: validate:"required" json:"object"
    string object = 4;
    //@inject_tag: validate:"required" json:"type"
    string type = 5;
    //@inject_tag: validate:"required" json:"sku" bson:"sku"
    string sku = 6;
    //@inject_tag: validate:"required" json:"name"
    map<string, string> name = 7;
    //@inject_tag: validate:"required,alpha,len=3" json:"default_currency"
    string default_currency = 8;
    //@inject_tag: validate:"required" json:"enabled"
    bool enabled = 9;
    //@inject_tag: validate:"required,min=1,dive" json:"prices"
    repeated ProductPrice prices = 10;
    //@inject_tag: validate:"required" json:"description"
    map<string, string> description = 11;
    //@inject_tag: validate:"omitempty" json:"long_description"
    map<string, string> long_description = 12;
    //@inject_tag: json:"created_at"
    google.protobuf.Timestamp created_at = 13;
    //@inject_tag: json:"updated_at"
    google.protobuf.Timestamp updated_at = 14;
    //@inject_tag: validate:"dive,omitempty,uri" json:"images"
    repeated string images = 15;
    //@inject_tag: validate:"omitempty,url" json:"url"
    string url = 16;
    //@inject_tag: json:"metadata"
    map<string, string> metadata = 17;
    //@inject_tag: json:"-" bson:"deleted"
    bool deleted = 18;

}

message ProductPrice {
    // @inject_tag: validate:"required,numeric,gt=0" json:"amount"
    double amount = 1;
    //@inject_tag: validate:"required,alpha,len=3" json:"currency"
    string currency = 2;
}

message ListProductsRequest {
    //@inject_tag: json:"name"
    string name = 1;
    //@inject_tag: json:"sku"
    string sku = 2;
    // @inject_tag: validate:"required,numeric,gt=0" json:"limit"
    int32 limit = 3;
    // @inject_tag: validate:"omitempty,numeric,gte=0" json:"offset"
    int32 offset = 4;
    //@inject_tag: validate:"required,hexadecimal,len=24" json:"merchant_id" bson:"merchant_id"
    string merchant_id = 5;
    //@inject_tag: validate:"omitempty,hexadecimal,len=24" json:"project_id" bson:"project_id"
    string project_id = 6;
}

message GetProductsForOrderRequest {
    //@inject_tag: validate:"required,hexadecimal,len=24" json:"project_id" bson:"project_id"
    string project_id = 1;
    //@inject_tag: validate:"required,dive,hexadecimal,len=24" json:"ids" bson:"ids"
    repeated string ids = 2;
}

message ListProductsResponse {
    // @inject_tag: json:"limit"
    int32 limit = 1;
    // @inject_tag: json:"offset"
    int32 offset = 2;
    // @inject_tag: json:"total"
    int32 total = 3;
    // @inject_tag: json:"products"
    repeated Product products = 5;
}

message RequestProduct {
    //@inject_tag: validate:"required,hexadecimal,len=24"
    string id = 1;
    //@inject_tag: validate:"hexadecimal,len=24" json:"merchant_id" bson:"merchant_id"
    string merchant_id = 2;
}

message I18NTextSearchable {
    //@inject_tag: validate:"required,alpha,len=2" json:"lang"
    string lang = 1;
    //@inject_tag: validate:"required" json:"value"
    string value = 2;
}

message ChangeCustomerResponse {
    int32 status = 1;
    string message = 2;
    billing.Customer item = 3;
}